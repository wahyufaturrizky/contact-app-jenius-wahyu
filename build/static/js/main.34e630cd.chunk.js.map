{"version":3,"sources":["blob2.svg","usericon.svg","blob1.svg","layout/Header.js","context/Context.js","pages/AddContact.js","context/action.types.js","components/Contact.js","pages/Contacts.js","pages/PageNotFound.js","pages/ViewContact.js","context/reducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","Navbar","className","NavbarBrand","onClick","window","open","style","cursor","NavbarText","ContactContext","createContext","AddContact","useContext","state","dispatch","contactToUpdate","contactToUpdateKey","history","useHistory","useState","isUpdate","setIsUpdate","firstName","setFirstName","lastName","setLastName","age","setAge","photo","setPhoto","isLoading","setIsLoading","useEffect","imagePicker","e","a","url","target","value","ext","substring","lastIndexOf","toLowerCase","files","reader","FileReader","readAsDataURL","onload","result","addContact","payload","fetch","method","body","JSON","stringify","headers","contactsRef","res","ok","toast","type","key","push","statusText","updateContact","Container","fluid","src","blob1","alt","blob2","Row","Col","md","Form","onSubmit","preventDefault","htmlFor","includes","usericon","name","id","accept","multiple","onChange","FormGroup","placeholder","Button","color","disabled","block","padding","fontSize","Contact","contact","contactKey","deleteContact","json","updateImpContact","star","size","opacity","viewSingleContact","zIndex","marginRight","Contacts","contacts","Spinner","length","ListGroup","Object","entries","map","ListGroupItem","fontWeight","letterSpacing","PageNotFound","ViewContact","Card","width","paddingLeft","paddingRight","CardBody","height","CardTitle","textTransform","CardSubtitle","href","marginTop","email","address","action","initialState","App","useReducer","reducer","getContacts","data","Provider","theme","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34e630cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blob2.a53502b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/usericon.3544bae9.svg\";","module.exports = __webpack_public_path__ + \"static/media/blob1.80674f0b.svg\";","//TODO: DONE set NavbarBrand to go to home page and export Header\n\nimport React from \"react\";\nimport { Navbar, NavbarBrand, NavbarText } from \"reactstrap\";\n\nconst Header = () => {\n  return (\n    <Navbar className=\"nav\">\n      <NavbarBrand\n        onClick={() => window.open(\"https://www.linkedin.com/in/wahyu-fatur-rizky/\", \"_blank\")}\n        className=\"text-white navbrand\"\n        style={{\n          cursor: \"pointer\",\n        }}\n      >\n        WAHYU Contact App\n      </NavbarBrand>\n      <NavbarText\n        onClick={() => window.open(\"https://www.linkedin.com/in/wahyu-fatur-rizky/\", \"_blank\")}\n        className=\"text-white float-right navtxt\"\n        style={{\n          cursor: \"pointer\",\n        }}\n      >\n        Contact app by Wahyu\n      </NavbarText>\n    </Navbar>\n  );\n};\n\nexport default Header;\n","//TODO: DONE: Create context: ContactContext\nimport { createContext } from \"react\";\n\nexport const ContactContext = createContext();\n","import React, { useContext, useEffect, useState } from \"react\";\n\nimport { Button, Col, Container, Form, FormGroup, Row } from \"reactstrap\";\n\n// to compress image before uploading to the server\n\n// configs for image resizing\n//TODO: DONE add image configurations\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nimport usericon from \"../usericon.svg\";\n\nimport blob1 from \"../blob1.svg\";\nimport blob2 from \"../blob2.svg\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setFirstName(contactToUpdate.firstName);\n      setLastName(contactToUpdate.lastName);\n      setAge(contactToUpdate.age);\n      setPhoto(contactToUpdate.photo);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async (e) => {\n    let url = e.target.value;\n    let ext = url.substring(url.lastIndexOf(\".\") + 1).toLowerCase();\n\n    if (\n      e.target.files &&\n      e.target.files[0] &&\n      (ext === \"gif\" || ext === \"png\" || ext === \"jpeg\" || ext === \"jpg\")\n    ) {\n      let reader = new FileReader();\n\n      reader.readAsDataURL(e.target.files[0]);\n\n      reader.onload = function (e) {\n        setPhoto(reader.result);\n      };\n    }\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    setIsLoading(true);\n    const payload = {\n      firstName,\n      lastName,\n      age,\n      photo,\n    };\n\n    const contactsRef = await fetch(`https://contact.herokuapp.com/contact`, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const res = await contactsRef;\n\n    if (res.ok) {\n      setIsLoading(false);\n      toast(\"Contacts Created\", { type: \"success\" });\n\n      dispatch({\n        type: CONTACT_TO_UPDATE,\n        payload: null,\n        key: null,\n      });\n\n      history.push(\"/\");\n    } else {\n      setIsLoading(false);\n      toast(res?.statusText, { type: \"error\" });\n\n      dispatch({\n        type: CONTACT_TO_UPDATE,\n        payload: null,\n        key: null,\n      });\n\n      history.push(\"/\");\n    }\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    setIsLoading(true);\n    //TODO: update contact method\n    const payload = {\n      firstName,\n      lastName,\n      age,\n      photo,\n    };\n\n    const contactsRef = await fetch(`https://contact.herokuapp.com/contact/${contactToUpdateKey}`, {\n      method: \"PUT\",\n      body: JSON.stringify(payload),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const res = await contactsRef;\n\n    if (res.ok) {\n      setIsLoading(false);\n      toast(\"Contacts Updated\", { type: \"success\" });\n\n      dispatch({\n        type: CONTACT_TO_UPDATE,\n        payload: null,\n        key: null,\n      });\n\n      history.push(\"/\");\n    } else {\n      setIsLoading(false);\n      toast(res?.statusText, { type: \"error\" });\n\n      dispatch({\n        type: CONTACT_TO_UPDATE,\n        payload: null,\n        key: null,\n      });\n\n      history.push(\"/\");\n    }\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    isUpdate ? updateContact() : addContact();\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5 \">\n      <img src={blob1} alt=\"blob1\" className=\"cirlce6\" />\n      <img src={blob2} alt=\"blob2\" className=\"cirlce7\" />\n      <Row>\n        <Col md=\"8\" className=\"offset-md-2 p-3 \">\n          <Form className=\"formcard mb-5\" onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              <div className=\"\">\n                <label htmlFor=\"imagepicker\" className=\"\">\n                  <img\n                    src={\n                      photo &&\n                      !photo.includes(\"file\") &&\n                      (photo.includes(\"http\") || photo.includes(\"data:image\"))\n                        ? photo\n                        : usericon\n                    }\n                    alt=\"\"\n                    className=\"profile\"\n                  />\n                </label>\n                <input\n                  type=\"file\"\n                  name=\"image\"\n                  id=\"imagepicker\"\n                  accept=\"image/*\"\n                  multiple={false}\n                  onChange={(e) => imagePicker(e)}\n                  className=\"hidden\"\n                />\n              </div>\n            </div>\n\n            <FormGroup className=\"mt-4\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"firstName\"\n                id=\"firstName\"\n                placeholder=\"First Name\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n              />\n            </FormGroup>\n\n            <FormGroup className=\"mt-4\">\n              <input\n                className=\"input\"\n                type=\"text\"\n                name=\"lastName\"\n                id=\"lastName\"\n                placeholder=\"Last Name\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <input\n                className=\"input mt-2 mb-2\"\n                type=\"number\"\n                name=\"age\"\n                id=\"age\"\n                value={age}\n                onChange={(e) => setAge(e.target.value)}\n                placeholder=\"Age\"\n              />\n            </FormGroup>\n\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              disabled={isLoading}\n              block\n              className=\"text-uppercase button mt-5\"\n              style={{\n                padding: \"15px\",\n                fontSize: \"18px\",\n              }}\n            >\n              {isLoading ? \"Loading...\" : isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n","//TODO: SET_LOADING, SET_CONTACT,\n// CONTACT_TO_UPDATE, SET_SINGLE_CONTACT\n\nexport const SET_LOADING = \"SET_LOADING\";\nexport const SET_CONTACT = \"SET_CONTACT\";\nexport const CONTACT_TO_UPDATE = \"CONTACT_TP_UPDATE\";\nexport const SET_SINGLE_CONTACT = \"SET_SINGLE_CONTACT\";\n","import React, { useContext } from \"react\";\nimport { Col, Row } from \"reactstrap\";\n\n// icons\nimport { FaRegStar, FaStar } from \"react-icons/fa\";\nimport { MdDelete, MdEdit } from \"react-icons/md\";\n\n// context stuffs\n//TODO: DONE import context and action: update and single_contact\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE, SET_SINGLE_CONTACT } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport usericon from \"../usericon.svg\";\n\nconst Contact = ({ contact, contactKey }) => {\n  //TODO: DONE destructuring dispatch from the context\n  const { dispatch } = useContext(ContactContext);\n\n  // history hooks to get history\n  const history = useHistory();\n\n  // to delete the contact when delete contact is clicked\n  const deleteContact = async () => {\n    //TODO: DONE create this method from api\n\n    const contactsRef = await fetch(`https://contact.herokuapp.com/contact/${contactKey}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    const res = await contactsRef.json();\n  };\n\n  const updateImpContact = async () => {};\n\n  // when the update icon/ pen ion is clicked\n  const updateContact = () => {\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: contact,\n      key: contactKey,\n    });\n\n    // and pushing to the add contact screen\n    history.push(\"/contact/add\");\n  };\n\n  // to view a single contact in the contact/view screen\n  const viewSingleContact = (contact) => {\n    // setting single contact in state\n    //TODO: use dispatch to view single contact\n    dispatch({\n      type: SET_SINGLE_CONTACT,\n      payload: contact,\n    });\n\n    // sending...\n    history.push(\"/contact/view\");\n  };\n\n  return (\n    <>\n      <Row>\n        <Col md=\"1\" className=\"d-flex justify-content-center align-items-center\">\n          <div className=\"icon\" onClick={() => updateImpContact()}>\n            {contact.star ? (\n              <FaStar size={22} className=\" text-white\" />\n            ) : (\n              <FaRegStar size={26} className=\" text-white\" style={{ opacity: \"65%\" }} />\n            )}\n          </div>\n        </Col>\n        <Col md=\"2\" className=\"d-flex justify-content-center align-items-center\">\n          <img\n            src={\n              contact.photo &&\n              !contact.photo.includes(\"file\") &&\n              (contact.photo.includes(\"http\") || contact.photo.includes(\"data:image\"))\n                ? contact.photo\n                : usericon\n            }\n            alt=\"\"\n            className=\"img-circle profile\"\n          />\n        </Col>\n        <Col md=\"8\" onClick={() => viewSingleContact(contact)}>\n          <div className=\"name\">{`${contact.firstName} ${contact.lastName}`}</div>\n\n          <div className=\"phone\" style={{ opacity: \"80%\" }}>\n            Age:\n          </div>\n          <div className=\"mail\" style={{ opacity: \"50%\" }}>\n            {contact.age}\n          </div>\n        </Col>\n        <Col md=\"1\" className=\"d-flex justify-content-center align-items-center\">\n          <div className=\"iconbtn mr-4 \">\n            <MdDelete\n              onClick={() => deleteContact()}\n              color=\"#FF6370\"\n              className=\" icon\"\n              style={{ zIndex: \"1\" }}\n            />\n          </div>\n          <div className=\"iconbtn mr-5\" style={{ marginRight: \"30px\" }}>\n            <MdEdit className=\"icon \" color=\"#54eafe\" onClick={() => updateContact()} />{\" \"}\n          </div>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Contact;\n","import React, { useContext } from \"react\";\n\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Container, ListGroup, ListGroupItem, Spinner } from \"reactstrap\";\nimport blob1 from \"../blob1.svg\";\nimport blob2 from \"../blob2.svg\";\nimport Contact from \"../components/Contact\";\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nconst Contacts = () => {\n  const { state, dispatch } = useContext(ContactContext);\n\n  // destructuring contacts and isLoading from state\n  const { contacts, isLoading } = state;\n\n  // history hooks from react router dom to get history\n  const history = useHistory();\n\n  // handle fab icon button click\n  // will set in state of the contact to update and send it to the contact/add route\n  const AddContact = () => {\n    //TODO: use dispatch to send user to add contact screen\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null,\n    });\n    history.push(\"/contact/add\");\n  };\n\n  // return loading spinner\n  if (isLoading) {\n    return (\n      <div className=\"Center\">\n        <Spinner color=\"primary\" />\n        <div className=\"text-primary\">Loading...</div>\n      </div>\n    );\n  }\n\n  return (\n    <Container className=\"mt-4 mb-5\">\n      <img src={blob1} alt=\"blob1\" className=\"cirlce1\" />\n      <img src={blob2} alt=\"blob2\" className=\"cirlce2\" />\n\n      {/* TODO: Loop through API objects  */}\n      {contacts.length === 0 && !isLoading ? (\n        <div\n          className=\"Center text-large cardtxt\"\n          style={{ fontWeight: \"700\", fontSize: \"32px\", letterSpacing: \"2px\" }}\n        >\n          No Contacts found in data ...!\n        </div>\n      ) : (\n        <ListGroup>\n          {Object.entries(contacts).map(([key, value]) => (\n            <ListGroupItem key={key} className=\"listcard mt-4\">\n              <Contact contact={value} contactKey={value.id} />\n            </ListGroupItem>\n          ))}\n        </ListGroup>\n      )}\n      <Button className=\" fab sticky-bottom d-print-inline-flex\" size=\"lg\" onClick={AddContact}>\n        Add Contact\n      </Button>\n    </Container>\n  );\n};\n\nexport default Contacts;\n","import React from \"react\";\n\nconst PageNotFound = () => {\n  return (\n    <div>\n      <h1>404 page not found</h1>\n    </div>\n  );\n};\n\n//FIXME: missing keywords\nexport default PageNotFound;\n","/* eslint-disable react/jsx-no-target-blank */\n/* eslint-disable jsx-a11y/alt-text */\nimport React, { useContext } from \"react\";\nimport usericon from \"../usericon.svg\";\n\nimport { Container, Row, Col, Card, CardBody, CardTitle, CardSubtitle } from \"reactstrap\";\nimport { FaEnvelope, FaMapMarkerAlt, FaPhone } from \"react-icons/fa\";\nimport { ContactContext } from \"../context/Context\";\nimport blob1 from \"../blob1.svg\";\nimport blob2 from \"../blob2.svg\";\n\nconst ViewContact = () => {\n  const { state } = useContext(ContactContext);\n  const { contact } = state;\n  return (\n    <Container>\n      <img src={blob1} alt=\"blob1\" className=\"cirlce3\" />\n      <img src={blob2} alt=\"blob2\" className=\"cirlce4\" />\n      <img src={blob2} alt=\"blob2\" className=\"cirlce5\" />\n      <Row className=\"mt-2 mb-5\">\n        <Col md=\"6\" className=\"offset-md-3\">\n          <Card\n            className=\"pt-5 pb-4 showcontact\"\n            style={{ width: \"53vh\", paddingLeft: \"40px\", paddingRight: \"40px\" }}\n          >\n            <CardBody className=\"text-center pb-4 \">\n              <img\n                height=\"150\"\n                width=\"150\"\n                className=\"profile\"\n                src={\n                  contact.photo &&\n                  !contact.photo.includes(\"file\") &&\n                  (contact.photo.includes(\"http\") || contact.photo.includes(\"data:image\"))\n                    ? contact.photo\n                    : usericon\n                }\n              />\n              <CardTitle className=\" mt-4 cardtxt\">\n                <h1\n                  className=\"cardtxt\"\n                  style={{\n                    fontWeight: \"500\",\n                    fontSize: \"32px\",\n                    textTransform: \"capitalize\",\n                  }}\n                >\n                  {`${contact?.firstName} ${contact?.lastName}`}\n                </h1>\n              </CardTitle>\n              <CardSubtitle className=\"mt-2\">\n                <h3\n                  className=\"cardtxt\"\n                  style={{\n                    fontWeight: \"500\",\n                    fontSize: \"22px\",\n                    opacity: \"80%\",\n                  }}\n                >\n                  <FaPhone className=\"mr-3\" size={18} />\n                  {contact?.age}\n                </h3>\n              </CardSubtitle>\n              <a\n                className=\"btn  button mt-5 \"\n                target=\"_blank\"\n                href={`mailto:{contact?.email}`}\n                style={{\n                  padding: \"14px\",\n                  letterSpacing: \"1px\",\n                  marginTop: \"20px\",\n                }}\n              >\n                <FaEnvelope className=\"icon mr-3\" size={18} />\n                {contact?.email}\n              </a>\n\n              <a\n                className=\"btn  button mt-4\"\n                target=\"_blank\"\n                //TODO: add google maps\n                href={`https://www.google.com/maps/place/${contact?.address}`}\n                style={{\n                  padding: \"14px\",\n                  letterSpacing: \"1px\",\n                  marginTop: \"20px\",\n                }}\n              >\n                <FaMapMarkerAlt className=\"icon mr-2\" size={16} />\n                {contact?.address}\n              </a>\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default ViewContact;\n","//TODO: DONE create contact using all actions\n\nimport { SET_CONTACT, SET_LOADING, CONTACT_TO_UPDATE, SET_SINGLE_CONTACT } from \"./action.types\";\n\n//TODO: DONE use switch case\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n      return action.payload == null\n        ? { ...state, contacts: [] }\n        : { ...state, contacts: action.payload };\n    case SET_LOADING:\n      return { ...state, isLoading: action.payload };\n    case CONTACT_TO_UPDATE:\n      return {\n        ...state,\n        contactToUpdate: action.payload,\n        contactToUpdateKey: action.key,\n      };\n    case SET_SINGLE_CONTACT:\n      return {\n        ...state,\n        contact: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useEffect, useReducer } from \"react\";\n\nimport { Container } from \"reactstrap\";\n\n// react-router-dom3\nimport { Route, BrowserRouter as Router, Switch } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// components\nimport Header from \"./layout/Header\";\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport PageNotFound from \"./pages/PageNotFound\";\nimport ViewContact from \"./pages/ViewContact\";\n\n// context api stuffs\n//TODO: DONE  import reducers and contexts\nimport { ContactContext } from \"./context/Context\";\nimport { SET_CONTACT, SET_LOADING } from \"./context/action.types\";\nimport reducer from \"./context/reducer\";\n\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false,\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from api and set it on state contacts array\n  const getContacts = async () => {\n    // TODO: load existing data\n    dispatch({\n      type: SET_LOADING,\n      payload: true,\n    });\n\n    const contactsRef = await fetch(`https://contact.herokuapp.com/contact`);\n\n    const res = await contactsRef.json();\n\n    dispatch({\n      type: SET_CONTACT,\n      payload: res?.data,\n    });\n\n    dispatch({\n      type: SET_LOADING,\n      payload: false,\n    });\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    getContacts();\n  }, []);\n\n  return (\n    <Router>\n      <ContactContext.Provider value={{ state, dispatch }}>\n        <ToastContainer theme=\"dark\" />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n      </ContactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}